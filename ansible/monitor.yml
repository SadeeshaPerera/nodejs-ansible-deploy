---
- name: Advanced Node.js Application Monitoring
  hosts: webservers
  become: yes
  vars:
    app_name: "nodejs-ansible-deploy"
    app_port: 3000
    app_dir: "/opt/nodejs-app"
    app_user: "nodeapp"
    systemd_service_name: "nodejs-app"
    monitoring_enabled: true
    alert_thresholds:
      cpu_percent: 80
      memory_percent: 85
      disk_percent: 90
      response_time_ms: 2000

  tasks:
    - name: Gather system information
      setup:
        gather_subset: all

    - name: Check Node.js application service status
      systemd:
        name: "{{ systemd_service_name }}"
      register: nodejs_service_status

    - name: Check PM2 service status (if using PM2)
      systemd:
        name: "pm2-{{ app_user }}"
      register: pm2_service_status
      ignore_errors: yes

    - name: Check Nginx service status
      systemd:
        name: nginx
      register: nginx_service_status

    - name: Check MongoDB service status
      systemd:
        name: mongod
      register: mongodb_service_status
      ignore_errors: yes

    - name: Check Redis service status
      systemd:
        name: redis-server
      register: redis_service_status
      ignore_errors: yes

    - name: Display service statuses
      debug:
        msg: |
          Service Status Summary:
          - Node.js App: {{ nodejs_service_status.status.ActiveState }}
          - PM2: {{ pm2_service_status.status.ActiveState if pm2_service_status.status is defined else 'Not configured' }}
          - Nginx: {{ nginx_service_status.status.ActiveState }}
          - MongoDB: {{ mongodb_service_status.status.ActiveState if mongodb_service_status.status is defined else 'Not configured' }}
          - Redis: {{ redis_service_status.status.ActiveState if redis_service_status.status is defined else 'Not configured' }}

    # Application Health Checks
    - name: Test direct application health endpoint
      uri:
        url: "http://localhost:{{ app_port }}/health"
        method: GET
        return_content: yes
        timeout: 5
      register: direct_health_check
      ignore_errors: yes

    - name: Test detailed health endpoint
      uri:
        url: "http://localhost:{{ app_port }}/health/detailed"
        method: GET
        return_content: yes
        timeout: 5
      register: detailed_health_check
      ignore_errors: yes

    - name: Test readiness probe
      uri:
        url: "http://localhost:{{ app_port }}/ready"
        method: GET
        return_content: yes
        timeout: 5
      register: readiness_check
      ignore_errors: yes

    - name: Test liveness probe
      uri:
        url: "http://localhost:{{ app_port }}/live"
        method: GET
        return_content: yes
        timeout: 5
      register: liveness_check
      ignore_errors: yes

    - name: Test Nginx proxy health
      uri:
        url: "http://localhost/health"
        method: GET
        return_content: yes
        timeout: 5
      register: nginx_health_check
      ignore_errors: yes

    - name: Display health check results
      debug:
        msg: |
          Health Check Results:
          - Direct Health: {{ direct_health_check.json.status if direct_health_check.json is defined else 'FAILED' }}
          - Detailed Health: {{ detailed_health_check.json.status if detailed_health_check.json is defined else 'FAILED' }}
          - Readiness: {{ readiness_check.json.status if readiness_check.json is defined else 'FAILED' }}
          - Liveness: {{ liveness_check.json.status if liveness_check.json is defined else 'FAILED' }}
          - Nginx Proxy: {{ nginx_health_check.json.status if nginx_health_check.json is defined else 'FAILED' }}

    # Performance Monitoring
    - name: Check system CPU usage
      shell: |
        top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}'
      register: cpu_usage
      changed_when: false

    - name: Check system memory usage
      shell: |
        free | grep Mem | awk '{printf "%.2f%%", $3/$2 * 100.0}'
      register: memory_usage
      changed_when: false

    - name: Check disk usage
      shell: |
        df -h {{ app_dir }} | awk 'NR==2{print $5}'
      register: disk_usage
      changed_when: false

    - name: Check application directory size
      shell: |
        du -sh {{ app_dir }} | cut -f1
      register: app_directory_size
      changed_when: false

    - name: Check network connections
      shell: |
        netstat -an | grep :{{ app_port }} | grep LISTEN | wc -l
      register: app_connections
      changed_when: false

    - name: Check process information
      shell: |
        ps aux | grep -v grep | grep "{{ app_name }}" | wc -l
      register: app_processes
      changed_when: false

    - name: Display performance metrics
      debug:
        msg: |
          Performance Metrics:
          - CPU Usage: {{ cpu_usage.stdout }}
          - Memory Usage: {{ memory_usage.stdout }}
          - Disk Usage: {{ disk_usage.stdout }}
          - App Directory Size: {{ app_directory_size.stdout }}
          - Active Connections: {{ app_connections.stdout }}
          - Running Processes: {{ app_processes.stdout }}

    # Log Analysis
    - name: Check application logs (last 50 lines)
      shell: |
        journalctl -u {{ systemd_service_name }} --no-pager -n 50
      register: app_logs
      changed_when: false

    - name: Check for application errors in logs
      shell: |
        journalctl -u {{ systemd_service_name }} --no-pager -n 100 | grep -i error | tail -10
      register: app_errors
      changed_when: false
      ignore_errors: yes

    - name: Check Nginx access logs
      shell: |
        tail -20 /var/log/nginx/{{ app_name }}.access.log
      register: nginx_access_logs
      changed_when: false
      ignore_errors: yes

    - name: Check Nginx error logs
      shell: |
        tail -20 /var/log/nginx/{{ app_name }}.error.log
      register: nginx_error_logs
      changed_when: false
      ignore_errors: yes

    - name: Display log analysis
      debug:
        msg: |
          Log Analysis:
          - Recent App Errors: {{ app_errors.stdout_lines | length }} errors found
          - Nginx Access Log Entries: {{ nginx_access_logs.stdout_lines | length }} recent entries
          - Nginx Error Log Entries: {{ nginx_error_logs.stdout_lines | length }} recent entries

    # Security Checks
    - name: Check for failed login attempts
      shell: |
        grep "Failed password" /var/log/auth.log | tail -5
      register: failed_logins
      changed_when: false
      ignore_errors: yes

    - name: Check firewall status
      shell: |
        ufw status
      register: firewall_status
      changed_when: false
      ignore_errors: yes

    - name: Check open ports
      shell: |
        netstat -tuln | grep LISTEN
      register: open_ports
      changed_when: false

    - name: Display security status
      debug:
        msg: |
          Security Status:
          - Recent Failed Logins: {{ failed_logins.stdout_lines | length }} attempts
          - Firewall Status: {{ firewall_status.stdout_lines[0] if firewall_status.stdout_lines else 'Unknown' }}
          - Open Ports: {{ open_ports.stdout_lines | length }} ports listening

    # Database Monitoring (if applicable)
    - name: Check MongoDB status
      shell: |
        mongo --eval "db.runCommand('serverStatus')" --quiet
      register: mongodb_status
      changed_when: false
      ignore_errors: yes
      when: mongodb_service_status.status is defined

    - name: Check Redis status
      shell: |
        redis-cli ping
      register: redis_status
      changed_when: false
      ignore_errors: yes
      when: redis_service_status.status is defined

    - name: Display database status
      debug:
        msg: |
          Database Status:
          - MongoDB: {{ 'Connected' if mongodb_status.rc == 0 else 'Disconnected' if mongodb_status is defined else 'Not configured' }}
          - Redis: {{ redis_status.stdout if redis_status.stdout is defined else 'Not configured' }}

    # PM2 Monitoring (if applicable)
    - name: Check PM2 process list
      shell: |
        pm2 list
      register: pm2_list
      changed_when: false
      ignore_errors: yes
      become_user: "{{ app_user }}"

    - name: Check PM2 logs
      shell: |
        pm2 logs --lines 10
      register: pm2_logs
      changed_when: false
      ignore_errors: yes
      become_user: "{{ app_user }}"

    - name: Display PM2 status
      debug:
        msg: |
          PM2 Status:
          - Process List: {{ pm2_list.stdout if pm2_list.stdout is defined else 'Not available' }}
          - Recent Logs: {{ pm2_logs.stdout_lines | length if pm2_logs.stdout_lines is defined else 0 }} lines

    # Alert Generation
    - name: Generate alerts for high resource usage
      debug:
        msg: |
          ALERT: High {{ item.resource }} usage detected: {{ item.current }}
          Threshold: {{ item.threshold }}
          Action: {{ item.action }}
      loop:
        - { resource: "CPU", current: "{{ cpu_usage.stdout }}", threshold: "{{ alert_thresholds.cpu_percent }}%", action: "Consider scaling or optimization" }
        - { resource: "Memory", current: "{{ memory_usage.stdout }}", threshold: "{{ alert_thresholds.memory_percent }}%", action: "Check for memory leaks" }
        - { resource: "Disk", current: "{{ disk_usage.stdout }}", threshold: "{{ alert_thresholds.disk_percent }}%", action: "Clean up old files or expand storage" }
      when: 
        - item.current | regex_replace('%', '') | int > item.threshold | regex_replace('%', '') | int

    # Generate Summary Report
    - name: Generate monitoring summary
      debug:
        msg: |
          ==========================================
          MONITORING SUMMARY - {{ ansible_date_time.date }} {{ ansible_date_time.time }}
          ==========================================
          
          SYSTEM INFORMATION:
          - Hostname: {{ ansible_hostname }}
          - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          - Kernel: {{ ansible_kernel }}
          - Architecture: {{ ansible_architecture }}
          - Uptime: {{ ansible_uptime_seconds // 3600 }} hours
          
          RESOURCE USAGE:
          - CPU: {{ cpu_usage.stdout }}
          - Memory: {{ memory_usage.stdout }}
          - Disk: {{ disk_usage.stdout }}
          - Load Average: {{ ansible_loadavg }}
          
          APPLICATION STATUS:
          - Node.js Service: {{ nodejs_service_status.status.ActiveState }}
          - Application Health: {{ direct_health_check.json.status if direct_health_check.json is defined else 'FAILED' }}
          - Response Time: {{ direct_health_check.elapsed if direct_health_check.elapsed is defined else 'N/A' }}s
          - Uptime: {{ direct_health_check.json.uptime if direct_health_check.json is defined else 'N/A' }}s
          
          PROXY STATUS:
          - Nginx Service: {{ nginx_service_status.status.ActiveState }}
          - Proxy Health: {{ nginx_health_check.json.status if nginx_health_check.json is defined else 'FAILED' }}
          
          RECENT ACTIVITY:
          - Application Errors: {{ app_errors.stdout_lines | length }}
          - Failed Logins: {{ failed_logins.stdout_lines | length }}
          - Active Connections: {{ app_connections.stdout }}
          
          ==========================================

    - name: Save monitoring report to file
      copy:
        content: |
          Monitoring Report - {{ ansible_date_time.date }} {{ ansible_date_time.time }}
          
          System: {{ ansible_hostname }}
          CPU Usage: {{ cpu_usage.stdout }}
          Memory Usage: {{ memory_usage.stdout }}
          Disk Usage: {{ disk_usage.stdout }}
          
          Application Health: {{ direct_health_check.json.status if direct_health_check.json is defined else 'FAILED' }}
          Nginx Status: {{ nginx_service_status.status.ActiveState }}
          
          Recent Errors: {{ app_errors.stdout_lines | length }}
          Active Connections: {{ app_connections.stdout }}
        dest: "/tmp/monitoring-report-{{ ansible_date_time.epoch }}.txt"
        mode: '0644'
      delegate_to: localhost
