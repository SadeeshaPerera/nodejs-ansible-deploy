---
- name: Deploy Advanced Node.js Application
  hosts: webservers
  become: yes
  vars:
    nodejs_version: "18"
    app_name: "nodejs-ansible-deploy"
    app_port: 3000
    app_dir: "/opt/nodejs-app"
    app_user: "nodeapp"
    app_group: "nodeapp"
    systemd_service_name: "nodejs-app"
    nginx_user: "www-data"
    nginx_group: "www-data"
    pm2_instances: "max"
    mongodb_version: "6.0"
    redis_version: "7.0"
    backup_dir: "/opt/backups"
    ssl_enabled: "{{ enable_ssl | default(false) }}"
    domain_name: "{{ app_domain | default('localhost') }}"
    environment: "{{ app_environment | default('production') }}"
    
  pre_tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600
        upgrade: dist
      when: ansible_os_family == "Debian"
      
    - name: Install basic system packages
      apt:
        name:
          - curl
          - wget
          - gnupg
          - software-properties-common
          - git
          - build-essential
          - python3-pip
          - htop
          - tree
          - unzip
          - jq
          - certbot
          - python3-certbot-nginx
        state: present
        update_cache: yes

  tasks:
    # System Configuration
    - name: Configure system limits
      lineinfile:
        path: /etc/security/limits.conf
        line: "{{ item }}"
        create: yes
      loop:
        - "* soft nofile 65535"
        - "* hard nofile 65535"
        - "{{ app_user }} soft nproc 4096"
        - "{{ app_user }} hard nproc 4096"
      notify: restart nodejs app

    - name: Configure kernel parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      loop:
        - { name: "net.core.somaxconn", value: "65535" }
        - { name: "net.ipv4.tcp_max_syn_backlog", value: "65535" }
        - { name: "vm.swappiness", value: "1" }
        - { name: "fs.file-max", value: "2097152" }

    # Node.js Installation
    - name: Add NodeSource repository
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_{{ nodejs_version }}.x | sudo -E bash -
      args:
        creates: /etc/apt/sources.list.d/nodesource.list

    - name: Install Node.js
      apt:
        name: nodejs
        state: present
        update_cache: yes

    - name: Install PM2 globally
      npm:
        name: pm2
        global: yes
        state: present

    - name: Install global npm packages
      npm:
        name: "{{ item }}"
        global: yes
        state: present
      loop:
        - npm-check-updates
        - nodemon
        - eslint

    # MongoDB Installation
    - name: Add MongoDB repository key
      apt_key:
        url: https://www.mongodb.org/static/pgp/server-{{ mongodb_version }}.asc
        state: present
      when: install_mongodb | default(false)

    - name: Add MongoDB repository
      apt_repository:
        repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/{{ mongodb_version }} multiverse"
        state: present
        update_cache: yes
      when: install_mongodb | default(false)

    - name: Install MongoDB
      apt:
        name: mongodb-org
        state: present
      when: install_mongodb | default(false)

    - name: Configure MongoDB
      template:
        src: mongod.conf.j2
        dest: /etc/mongod.conf
        backup: yes
      notify: restart mongodb
      when: install_mongodb | default(false)

    - name: Start and enable MongoDB
      systemd:
        name: mongod
        state: started
        enabled: yes
      when: install_mongodb | default(false)

    # Redis Installation
    - name: Install Redis
      apt:
        name: redis-server
        state: present
      when: install_redis | default(false)

    - name: Configure Redis
      template:
        src: redis.conf.j2
        dest: /etc/redis/redis.conf
        backup: yes
      notify: restart redis
      when: install_redis | default(false)

    - name: Start and enable Redis
      systemd:
        name: redis-server
        state: started
        enabled: yes
      when: install_redis | default(false)

    # User and Directory Setup
    - name: Create application group
      group:
        name: "{{ app_group }}"
        state: present

    - name: Create application user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        create_home: yes
        comment: "Node.js application user"

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ app_dir }}/logs"
        - "{{ app_dir }}/uploads"
        - "{{ app_dir }}/tmp"
        - "{{ backup_dir }}"

    # Application Deployment
    - name: Stop application if running
      systemd:
        name: "{{ systemd_service_name }}"
        state: stopped
      ignore_errors: yes

    - name: Create backup of current application
      archive:
        path: "{{ app_dir }}"
        dest: "{{ backup_dir }}/{{ app_name }}-{{ ansible_date_time.epoch }}.tar.gz"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
      when: backup_before_deploy | default(true)
      ignore_errors: yes

    - name: Copy application files
      copy:
        src: "{{ item }}"
        dest: "{{ app_dir }}/{{ item }}"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      with_items:
        - ../package.json
        - ../app.js
        - ../ecosystem.config.js
        - ../healthcheck.js
      notify: restart nodejs app

    - name: Copy source directory
      copy:
        src: ../src/
        dest: "{{ app_dir }}/src/"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      notify: restart nodejs app

    - name: Copy public directory
      copy:
        src: ../public/
        dest: "{{ app_dir }}/public/"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      notify: restart nodejs app

    - name: Create environment file
      template:
        src: .env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0600'
      notify: restart nodejs app

    - name: Install npm dependencies
      npm:
        path: "{{ app_dir }}"
        production: yes
        state: present
      become_user: "{{ app_user }}"

    - name: Run application tests
      shell: npm test
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}"
      when: run_tests | default(false)
      ignore_errors: yes

    # PM2 Configuration
    - name: Setup PM2 startup
      shell: |
        pm2 startup systemd -u {{ app_user }} --hp {{ app_dir }}
        systemctl enable pm2-{{ app_user }}
      become: yes
      when: use_pm2 | default(false)

    - name: Start application with PM2
      shell: |
        pm2 start {{ app_dir }}/ecosystem.config.js --env production
        pm2 save
      become_user: "{{ app_user }}"
      when: use_pm2 | default(false)

    # Systemd Service Configuration
    - name: Create systemd service file
      template:
        src: nodejs-app.service.j2
        dest: "/etc/systemd/system/{{ systemd_service_name }}.service"
        mode: '0644'
      notify:
        - reload systemd
        - restart nodejs app
      when: not (use_pm2 | default(false))

    # Nginx Configuration
    - name: Install Nginx
      apt:
        name: nginx
        state: present

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Configure Nginx site
      template:
        src: nginx-site.conf.j2
        dest: "/etc/nginx/sites-available/{{ app_name }}"
        mode: '0644'
      notify: restart nginx

    - name: Enable Nginx site
      file:
        src: "/etc/nginx/sites-available/{{ app_name }}"
        dest: "/etc/nginx/sites-enabled/{{ app_name }}"
        state: link
      notify: restart nginx

    - name: Configure Nginx global settings
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        backup: yes
      notify: restart nginx

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test_result
      changed_when: false

    # SSL/TLS Configuration
    - name: Obtain SSL certificate with Certbot
      shell: |
        certbot --nginx -d {{ domain_name }} --non-interactive --agree-tos --email {{ ssl_email | default('admin@' + domain_name) }}
      when: ssl_enabled and domain_name != 'localhost'
      ignore_errors: yes

    # Firewall Configuration
    - name: Install UFW
      apt:
        name: ufw
        state: present

    - name: Configure UFW rules
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - "22"    # SSH
        - "80"    # HTTP
        - "443"   # HTTPS
        - "{{ app_port }}"  # Node.js app (if direct access needed)

    - name: Enable UFW
      ufw:
        state: enabled

    # Monitoring Setup
    - name: Install monitoring tools
      apt:
        name:
          - htop
          - iotop
          - nethogs
          - nload
          - ncdu
        state: present

    - name: Create monitoring script
      template:
        src: monitor.sh.j2
        dest: /usr/local/bin/monitor-app
        mode: '0755'

    - name: Setup log rotation
      template:
        src: logrotate.j2
        dest: "/etc/logrotate.d/{{ app_name }}"
        mode: '0644'

    # Cron Jobs
    - name: Setup application health check cron job
      cron:
        name: "Health check for {{ app_name }}"
        minute: "*/5"
        job: "/usr/local/bin/monitor-app health >> /var/log/health-check.log 2>&1"
        user: "{{ app_user }}"

    - name: Setup backup cron job
      cron:
        name: "Backup {{ app_name }}"
        minute: "0"
        hour: "2"
        job: "tar -czf {{ backup_dir }}/{{ app_name }}-$(date +\\%Y\\%m\\%d-\\%H\\%M\\%S).tar.gz {{ app_dir }} && find {{ backup_dir }} -name '{{ app_name }}-*.tar.gz' -mtime +7 -delete"
        user: "{{ app_user }}"

    # Service Management
    - name: Start and enable services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
        daemon_reload: yes
      loop:
        - "{{ systemd_service_name }}"
        - nginx
      when: not (use_pm2 | default(false))

    - name: Enable services (PM2 mode)
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
        daemon_reload: yes
      loop:
        - "pm2-{{ app_user }}"
        - nginx
      when: use_pm2 | default(false)

    # Health Checks
    - name: Wait for application to start
      wait_for:
        port: "{{ app_port }}"
        host: localhost
        timeout: 60
        delay: 10

    - name: Test application health endpoint
      uri:
        url: "http://localhost:{{ app_port }}/health"
        method: GET
        return_content: yes
        timeout: 10
      register: health_check
      retries: 5
      delay: 10
      until: health_check.status == 200

    - name: Test Nginx proxy
      uri:
        url: "http://localhost/health"
        method: GET
        return_content: yes
        timeout: 10
      register: nginx_health_check
      retries: 3
      delay: 5

    - name: Display deployment results
      debug:
        msg: |
          Deployment completed successfully!
          Application: {{ app_name }}
          Version: {{ app_version | default('1.0.0') }}
          Environment: {{ environment }}
          Health check: {{ health_check.json.status if health_check.json is defined else 'Failed' }}
          Nginx proxy: {{ nginx_health_check.json.status if nginx_health_check.json is defined else 'Failed' }}
          URL: http://{{ domain_name }}{{ ':' + app_port|string if domain_name == 'localhost' else '' }}

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart nodejs app
      systemd:
        name: "{{ systemd_service_name }}"
        state: restarted
      when: not (use_pm2 | default(false))

    - name: restart pm2 app
      shell: |
        pm2 restart {{ app_dir }}/ecosystem.config.js --env production
        pm2 save
      become_user: "{{ app_user }}"
      when: use_pm2 | default(false)

    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: restart mongodb
      systemd:
        name: mongod
        state: restarted
      when: install_mongodb | default(false)

    - name: restart redis
      systemd:
        name: redis-server
        state: restarted
      when: install_redis | default(false)
